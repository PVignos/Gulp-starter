!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Alert=t(e.jQuery,e.Util)}(this,function(e,i){"use strict";function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s,t,l,n,r,a,f,c,d,o;return e=e&&e.hasOwnProperty("default")?e.default:e,i=i&&i.hasOwnProperty("default")?i.default:i,t="alert",n="."+(l="bs.alert"),r=(s=e).fn[t],a={CLOSE:"close"+n,CLOSED:"closed"+n,CLICK_DATA_API:"click"+n+".data-api"},f="alert",c="fade",d="show",o=function(){function r(e){this._element=e}var e,t,n,o=r.prototype;return o.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},o.dispose=function(){s.removeData(this._element,l),this._element=null},o._getRootElement=function(e){var t=i.getSelectorFromElement(e),n=!1;return t&&(n=document.querySelector(t)),n||(n=s(e).closest("."+f)[0]),n},o._triggerCloseEvent=function(e){var t=s.Event(a.CLOSE);return s(e).trigger(t),t},o._removeElement=function(t){var n=this;if(s(t).removeClass(d),s(t).hasClass(c)){var e=i.getTransitionDurationFromElement(t);s(t).one(i.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(e)}else this._destroyElement(t)},o._destroyElement=function(e){s(e).detach().trigger(a.CLOSED).remove()},r._jQueryInterface=function(n){return this.each(function(){var e=s(this),t=e.data(l);t||(t=new r(this),e.data(l,t)),"close"===n&&t[n](this)})},r._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},e=r,n=[{key:"VERSION",get:function(){return"4.1.3"}}],(t=null)&&u(e.prototype,t),n&&u(e,n),r}(),s(document).on(a.CLICK_DATA_API,'[data-dismiss="alert"]',o._handleDismiss(new o)),s.fn[t]=o._jQueryInterface,s.fn[t].Constructor=o,s.fn[t].noConflict=function(){return s.fn[t]=r,o._jQueryInterface},o});
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):e.Button=t(e.jQuery)}(this,function(e){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var a,t,o,n,s,i,u,l,c,f,d,h,_,g,b,y;return e=e&&e.hasOwnProperty("default")?e.default:e,t="button",n="."+(o="bs.button"),s=".data-api",i=(a=e).fn[t],u="active",l="btn",f='[data-toggle^="button"]',d='[data-toggle="buttons"]',h="input",_=".active",g=".btn",b={CLICK_DATA_API:"click"+n+s,FOCUS_BLUR_DATA_API:(c="focus")+n+s+" blur"+n+s},y=function(){function n(e){this._element=e}var e,t,s,i=n.prototype;return i.toggle=function(){var e=!0,t=!0,n=a(this._element).closest(d)[0];if(n){var s=this._element.querySelector(h);if(s){if("radio"===s.type)if(s.checked&&this._element.classList.contains(u))e=!1;else{var i=n.querySelector(_);i&&a(i).removeClass(u)}if(e){if(s.hasAttribute("disabled")||n.hasAttribute("disabled")||s.classList.contains("disabled")||n.classList.contains("disabled"))return;s.checked=!this._element.classList.contains(u),a(s).trigger("change")}s.focus(),t=!1}}t&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(u)),e&&a(this._element).toggleClass(u)},i.dispose=function(){a.removeData(this._element,o),this._element=null},n._jQueryInterface=function(t){return this.each(function(){var e=a(this).data(o);e||(e=new n(this),a(this).data(o,e)),"toggle"===t&&e[t]()})},e=n,s=[{key:"VERSION",get:function(){return"4.1.3"}}],(t=null)&&r(e.prototype,t),s&&r(e,s),n}(),a(document).on(b.CLICK_DATA_API,f,function(e){e.preventDefault();var t=e.target;a(t).hasClass(l)||(t=a(t).closest(g)),y._jQueryInterface.call(a(t),"toggle")}).on(b.FOCUS_BLUR_DATA_API,f,function(e){var t=a(e.target).closest(g)[0];a(t).toggleClass(c,/^focus(in)?$/.test(e.type))}),a.fn[t]=y._jQueryInterface,a.fn[t].Constructor=y,a.fn[t].noConflict=function(){return a.fn[t]=i,y._jQueryInterface},y});
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Carousel=t(e.jQuery,e.Util)}(this,function(e,f){"use strict";function s(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(s){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},t=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),t.forEach(function(e){var t,i,n;t=s,n=r[i=e],i in t?Object.defineProperty(t,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[i]=n})}return s}var _,a,o,u,t,i,c,h,m,d,v,g,y,p,E,I,b,S,C,D,A,O,T,w,x,n,r,j;return e=e&&e.hasOwnProperty("default")?e.default:e,f=f&&f.hasOwnProperty("default")?f.default:f,a="carousel",u="."+(o="bs.carousel"),t=".data-api",i=(_=e).fn[a],c={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},h={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},m="next",d="prev",v="left",g="right",y={SLIDE:"slide"+u,SLID:"slid"+u,KEYDOWN:"keydown"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u,TOUCHEND:"touchend"+u,LOAD_DATA_API:"load"+u+t,CLICK_DATA_API:"click"+u+t},p="carousel",E="active",I="slide",b="carousel-item-right",S="carousel-item-left",C="carousel-item-next",D="carousel-item-prev",A=".active",O=".active.carousel-item",T=".carousel-item",w=".carousel-item-next, .carousel-item-prev",x=".carousel-indicators",n="[data-slide], [data-slide-to]",r='[data-ride="carousel"]',j=function(){function r(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(t),this._element=_(e)[0],this._indicatorsElement=this._element.querySelector(x),this._addEventListeners()}var e,t,i,n=r.prototype;return n.next=function(){this._isSliding||this._slide(m)},n.nextWhenVisible=function(){!document.hidden&&_(this._element).is(":visible")&&"hidden"!==_(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(d)},n.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(w)&&(f.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(e){var t=this;this._activeElement=this._element.querySelector(O);var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)_(this._element).one(y.SLID,function(){return t.to(e)});else{if(i===e)return this.pause(),void this.cycle();var n=i<e?m:d;this._slide(n,this._items[e])}},n.dispose=function(){_(this._element).off(u),_.removeData(this._element,o),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(e){return e=l({},c,e),f.typeCheckConfig(a,e,h),e},n._addEventListeners=function(){var t=this;this._config.keyboard&&_(this._element).on(y.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(_(this._element).on(y.MOUSEENTER,function(e){return t.pause(e)}).on(y.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&_(this._element).on(y.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},n._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},n._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(T)):[],this._items.indexOf(e)},n._getItemByDirection=function(e,t){var i=e===m,n=e===d,s=this._getItemIndex(t),r=this._items.length-1;if((n&&0===s||i&&s===r)&&!this._config.wrap)return t;var l=(s+(e===d?-1:1))%this._items.length;return-1===l?this._items[this._items.length-1]:this._items[l]},n._triggerSlideEvent=function(e,t){var i=this._getItemIndex(e),n=this._getItemIndex(this._element.querySelector(O)),s=_.Event(y.SLIDE,{relatedTarget:e,direction:t,from:n,to:i});return _(this._element).trigger(s),s},n._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var t=[].slice.call(this._indicatorsElement.querySelectorAll(A));_(t).removeClass(E);var i=this._indicatorsElement.children[this._getItemIndex(e)];i&&_(i).addClass(E)}},n._slide=function(e,t){var i,n,s,r=this,l=this._element.querySelector(O),a=this._getItemIndex(l),o=t||l&&this._getItemByDirection(e,l),u=this._getItemIndex(o),c=Boolean(this._interval);if(e===m?(i=S,n=C,s=v):(i=b,n=D,s=g),o&&_(o).hasClass(E))this._isSliding=!1;else if(!this._triggerSlideEvent(o,s).isDefaultPrevented()&&l&&o){this._isSliding=!0,c&&this.pause(),this._setActiveIndicatorElement(o);var h=_.Event(y.SLID,{relatedTarget:o,direction:s,from:a,to:u});if(_(this._element).hasClass(I)){_(o).addClass(n),f.reflow(o),_(l).addClass(i),_(o).addClass(i);var d=f.getTransitionDurationFromElement(l);_(l).one(f.TRANSITION_END,function(){_(o).removeClass(i+" "+n).addClass(E),_(l).removeClass(E+" "+n+" "+i),r._isSliding=!1,setTimeout(function(){return _(r._element).trigger(h)},0)}).emulateTransitionEnd(d)}else _(l).removeClass(E),_(o).addClass(E),this._isSliding=!1,_(this._element).trigger(h);c&&this.cycle()}},r._jQueryInterface=function(n){return this.each(function(){var e=_(this).data(o),t=l({},c,_(this).data());"object"==typeof n&&(t=l({},t,n));var i="string"==typeof n?n:t.slide;if(e||(e=new r(this,t),_(this).data(o,e)),"number"==typeof n)e.to(n);else if("string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i]()}else t.interval&&(e.pause(),e.cycle())})},r._dataApiClickHandler=function(e){var t=f.getSelectorFromElement(this);if(t){var i=_(t)[0];if(i&&_(i).hasClass(p)){var n=l({},_(i).data(),_(this).data()),s=this.getAttribute("data-slide-to");s&&(n.interval=!1),r._jQueryInterface.call(_(i),n),s&&_(i).data(o).to(s),e.preventDefault()}}},e=r,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return c}}],(t=null)&&s(e.prototype,t),i&&s(e,i),r}(),_(document).on(y.CLICK_DATA_API,n,j._dataApiClickHandler),_(window).on(y.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(r)),t=0,i=e.length;t<i;t++){var n=_(e[t]);j._jQueryInterface.call(n,n.data())}}),_.fn[a]=j._jQueryInterface,_.fn[a].Constructor=j,_.fn[a].noConflict=function(){return _.fn[a]=i,j._jQueryInterface},j});
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Collapse=t(e.jQuery,e.Util)}(this,function(e,o){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(i){for(var e=1;e<arguments.length;e++){var l=null!=arguments[e]?arguments[e]:{},t=Object.keys(l);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(l).filter(function(e){return Object.getOwnPropertyDescriptor(l,e).enumerable}))),t.forEach(function(e){var t,n,r;t=i,r=l[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return i}var c,a,g,t,n,u,h,f,d,_,m,p,y,v,C,A,s;return e=e&&e.hasOwnProperty("default")?e.default:e,o=o&&o.hasOwnProperty("default")?o.default:o,a="collapse",t="."+(g="bs.collapse"),n=(c=e).fn[a],u={toggle:!0,parent:""},h={toggle:"boolean",parent:"(string|element)"},f={SHOW:"show"+t,SHOWN:"shown"+t,HIDE:"hide"+t,HIDDEN:"hidden"+t,CLICK_DATA_API:"click"+t+".data-api"},d="show",_="collapse",m="collapsing",p="collapsed",y="width",v="height",C=".show, .collapsing",A='[data-toggle="collapse"]',s=function(){function s(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=c.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(A)),r=0,i=n.length;r<i;r++){var l=n[r],a=o.getSelectorFromElement(l),s=[].slice.call(document.querySelectorAll(a)).filter(function(e){return e===t});null!==a&&0<s.length&&(this._selector=a,this._triggerArray.push(l))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e,t,n,r=s.prototype;return r.toggle=function(){c(this._element).hasClass(d)?this.hide():this.show()},r.show=function(){var e,t,n=this;if(!this._isTransitioning&&!c(this._element).hasClass(d)&&(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(C)).filter(function(e){return e.getAttribute("data-parent")===n._config.parent})).length&&(e=null),!(e&&(t=c(e).not(this._selector).data(g))&&t._isTransitioning))){var r=c.Event(f.SHOW);if(c(this._element).trigger(r),!r.isDefaultPrevented()){e&&(s._jQueryInterface.call(c(e).not(this._selector),"hide"),t||c(e).data(g,null));var i=this._getDimension();c(this._element).removeClass(_).addClass(m),this._element.style[i]=0,this._triggerArray.length&&c(this._triggerArray).removeClass(p).attr("aria-expanded",!0),this.setTransitioning(!0);var l="scroll"+(i[0].toUpperCase()+i.slice(1)),a=o.getTransitionDurationFromElement(this._element);c(this._element).one(o.TRANSITION_END,function(){c(n._element).removeClass(m).addClass(_).addClass(d),n._element.style[i]="",n.setTransitioning(!1),c(n._element).trigger(f.SHOWN)}).emulateTransitionEnd(a),this._element.style[i]=this._element[l]+"px"}}},r.hide=function(){var e=this;if(!this._isTransitioning&&c(this._element).hasClass(d)){var t=c.Event(f.HIDE);if(c(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",o.reflow(this._element),c(this._element).addClass(m).removeClass(_).removeClass(d);var r=this._triggerArray.length;if(0<r)for(var i=0;i<r;i++){var l=this._triggerArray[i],a=o.getSelectorFromElement(l);if(null!==a)c([].slice.call(document.querySelectorAll(a))).hasClass(d)||c(l).addClass(p).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[n]="";var s=o.getTransitionDurationFromElement(this._element);c(this._element).one(o.TRANSITION_END,function(){e.setTransitioning(!1),c(e._element).removeClass(m).addClass(_).trigger(f.HIDDEN)}).emulateTransitionEnd(s)}}},r.setTransitioning=function(e){this._isTransitioning=e},r.dispose=function(){c.removeData(this._element,g),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},r._getConfig=function(e){return(e=l({},u,e)).toggle=Boolean(e.toggle),o.typeCheckConfig(a,e,h),e},r._getDimension=function(){return c(this._element).hasClass(y)?y:v},r._getParent=function(){var n=this,e=null;o.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var t='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',r=[].slice.call(e.querySelectorAll(t));return c(r).each(function(e,t){n._addAriaAndCollapsedClass(s._getTargetFromElement(t),[t])}),e},r._addAriaAndCollapsedClass=function(e,t){if(e){var n=c(e).hasClass(d);t.length&&c(t).toggleClass(p,!n).attr("aria-expanded",n)}},s._getTargetFromElement=function(e){var t=o.getSelectorFromElement(e);return t?document.querySelector(t):null},s._jQueryInterface=function(r){return this.each(function(){var e=c(this),t=e.data(g),n=l({},u,e.data(),"object"==typeof r&&r?r:{});if(!t&&n.toggle&&/show|hide/.test(r)&&(n.toggle=!1),t||(t=new s(this,n),e.data(g,t)),"string"==typeof r){if(void 0===t[r])throw new TypeError('No method named "'+r+'"');t[r]()}})},e=s,n=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return u}}],(t=null)&&i(e.prototype,t),n&&i(e,n),s}(),c(document).on(f.CLICK_DATA_API,A,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=c(this),t=o.getSelectorFromElement(this),r=[].slice.call(document.querySelectorAll(t));c(r).each(function(){var e=c(this),t=e.data(g)?"toggle":n.data();s._jQueryInterface.call(e,t)})}),c.fn[a]=s._jQueryInterface,c.fn[a].Constructor=s,c.fn[a].noConflict=function(){return c.fn[a]=n,s._jQueryInterface},s});
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],t):e.Dropdown=t(e.jQuery,e.Popper,e.Util)}(this,function(e,i,s){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(o){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{},t=Object.keys(i);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(i).filter(function(e){return Object.getOwnPropertyDescriptor(i,e).enumerable}))),t.forEach(function(e){var t,n,r;t=o,r=i[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r})}return o}var f,l,c,h,t,n,p,d,g,_,m,y,v,w,b,P,r,C,A,E,D,I,j,O,N,k,T,K,u;return e=e&&e.hasOwnProperty("default")?e.default:e,i=i&&i.hasOwnProperty("default")?i.default:i,s=s&&s.hasOwnProperty("default")?s.default:s,l="dropdown",h="."+(c="bs.dropdown"),t=".data-api",n=(f=e).fn[l],p=new RegExp("38|40|27"),d={HIDE:"hide"+h,HIDDEN:"hidden"+h,SHOW:"show"+h,SHOWN:"shown"+h,CLICK:"click"+h,CLICK_DATA_API:"click"+h+t,KEYDOWN_DATA_API:"keydown"+h+t,KEYUP_DATA_API:"keyup"+h+t},g="disabled",_="show",m="dropup",y="dropright",v="dropleft",w="dropdown-menu-right",b="position-static",P='[data-toggle="dropdown"]',r=".dropdown form",C=".dropdown-menu",A=".navbar-nav",E=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",D="top-start",I="top-end",j="bottom-start",O="bottom-end",N="right-start",k="left-start",T={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},K={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},u=function(){function u(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e,t,n,r=u.prototype;return r.toggle=function(){if(!this._element.disabled&&!f(this._element).hasClass(g)){var e=u._getParentFromElement(this._element),t=f(this._menu).hasClass(_);if(u._clearMenus(),!t){var n={relatedTarget:this._element},r=f.Event(d.SHOW,n);if(f(e).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar){if(void 0===i)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var o=this._element;"parent"===this._config.reference?o=e:s.isElement(this._config.reference)&&(o=this._config.reference,void 0!==this._config.reference.jquery&&(o=this._config.reference[0])),"scrollParent"!==this._config.boundary&&f(e).addClass(b),this._popper=new i(o,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===f(e).closest(A).length&&f(document.body).children().on("mouseover",null,f.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),f(this._menu).toggleClass(_),f(e).toggleClass(_).trigger(f.Event(d.SHOWN,n))}}}},r.dispose=function(){f.removeData(this._element,c),f(this._element).off(h),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},r.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},r._addEventListeners=function(){var t=this;f(this._element).on(d.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},r._getConfig=function(e){return e=a({},this.constructor.Default,f(this._element).data(),e),s.typeCheckConfig(l,e,this.constructor.DefaultType),e},r._getMenuElement=function(){if(!this._menu){var e=u._getParentFromElement(this._element);e&&(this._menu=e.querySelector(C))}return this._menu},r._getPlacement=function(){var e=f(this._element.parentNode),t=j;return e.hasClass(m)?(t=D,f(this._menu).hasClass(w)&&(t=I)):e.hasClass(y)?t=N:e.hasClass(v)?t=k:f(this._menu).hasClass(w)&&(t=O),t},r._detectNavbar=function(){return 0<f(this._element).closest(".navbar").length},r._getPopperConfig=function(){var t=this,e={};"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,t._config.offset(e.offsets)||{}),e}:e.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:e,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},u._jQueryInterface=function(t){return this.each(function(){var e=f(this).data(c);if(e||(e=new u(this,"object"==typeof t?t:null),f(this).data(c,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},u._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var t=[].slice.call(document.querySelectorAll(P)),n=0,r=t.length;n<r;n++){var o=u._getParentFromElement(t[n]),i=f(t[n]).data(c),s={relatedTarget:t[n]};if(e&&"click"===e.type&&(s.clickEvent=e),i){var a=i._menu;if(f(o).hasClass(_)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&f.contains(o,e.target))){var l=f.Event(d.HIDE,s);f(o).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&f(document.body).children().off("mouseover",null,f.noop),t[n].setAttribute("aria-expanded","false"),f(a).removeClass(_),f(o).removeClass(_).trigger(f.Event(d.HIDDEN,s)))}}}},u._getParentFromElement=function(e){var t,n=s.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},u._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||f(e.target).closest(C).length)):p.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!f(this).hasClass(g))){var t=u._getParentFromElement(this),n=f(t).hasClass(_);if((n||27===e.which&&32===e.which)&&(!n||27!==e.which&&32!==e.which)){var r=[].slice.call(t.querySelectorAll(E));if(0!==r.length){var o=r.indexOf(e.target);38===e.which&&0<o&&o--,40===e.which&&o<r.length-1&&o++,o<0&&(o=0),r[o].focus()}}else{if(27===e.which){var i=t.querySelector(P);f(i).trigger("focus")}f(this).trigger("click")}}},e=u,n=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return T}},{key:"DefaultType",get:function(){return K}}],(t=null)&&o(e.prototype,t),n&&o(e,n),u}(),f(document).on(d.KEYDOWN_DATA_API,P,u._dataApiKeydownHandler).on(d.KEYDOWN_DATA_API,C,u._dataApiKeydownHandler).on(d.CLICK_DATA_API+" "+d.KEYUP_DATA_API,u._clearMenus).on(d.CLICK_DATA_API,P,function(e){e.preventDefault(),e.stopPropagation(),u._jQueryInterface.call(f(this),"toggle")}).on(d.CLICK_DATA_API,r,function(e){e.stopPropagation()}),f.fn[l]=u._jQueryInterface,f.fn[l].Constructor=u,f.fn[l].noConflict=function(){return f.fn[l]=n,u._jQueryInterface},u});
!function(r){if(void 0===r)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=r.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||4<=t[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}($);
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Modal=t(e.jQuery,e.Util)}(this,function(e,r){"use strict";function s(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(o){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{},t=Object.keys(s);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(s).filter(function(e){return Object.getOwnPropertyDescriptor(s,e).enumerable}))),t.forEach(function(e){var t,i,n;t=o,n=s[i=e],i in t?Object.defineProperty(t,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[i]=n})}return o}var l,d,h,c,t,u,_,f,m,g,p,S,b,v,i,y,w,E,I;return e=e&&e.hasOwnProperty("default")?e.default:e,r=r&&r.hasOwnProperty("default")?r.default:r,d="modal",c="."+(h="bs.modal"),t=(l=e).fn[d],u={backdrop:!0,keyboard:!0,focus:!0,show:!0},_={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},f={HIDE:"hide"+c,HIDDEN:"hidden"+c,SHOW:"show"+c,SHOWN:"shown"+c,FOCUSIN:"focusin"+c,RESIZE:"resize"+c,CLICK_DISMISS:"click.dismiss"+c,KEYDOWN_DISMISS:"keydown.dismiss"+c,MOUSEUP_DISMISS:"mouseup.dismiss"+c,MOUSEDOWN_DISMISS:"mousedown.dismiss"+c,CLICK_DATA_API:"click"+c+".data-api"},m="modal-scrollbar-measure",g="modal-backdrop",p="modal-open",S="fade",b="show",v=".modal-dialog",i='[data-toggle="modal"]',y='[data-dismiss="modal"]',w=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",E=".sticky-top",I=function(){function o(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(v),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var e,t,i,n=o.prototype;return n.toggle=function(e){return this._isShown?this.hide():this.show(e)},n.show=function(e){var t=this;if(!this._isTransitioning&&!this._isShown){l(this._element).hasClass(S)&&(this._isTransitioning=!0);var i=l.Event(f.SHOW,{relatedTarget:e});l(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),l(document.body).addClass(p),this._setEscapeEvent(),this._setResizeEvent(),l(this._element).on(f.CLICK_DISMISS,y,function(e){return t.hide(e)}),l(this._dialog).on(f.MOUSEDOWN_DISMISS,function(){l(t._element).one(f.MOUSEUP_DISMISS,function(e){l(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(e)}))}},n.hide=function(e){var t=this;if(e&&e.preventDefault(),!this._isTransitioning&&this._isShown){var i=l.Event(f.HIDE);if(l(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var n=l(this._element).hasClass(S);if(n&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),l(document).off(f.FOCUSIN),l(this._element).removeClass(b),l(this._element).off(f.CLICK_DISMISS),l(this._dialog).off(f.MOUSEDOWN_DISMISS),n){var o=r.getTransitionDurationFromElement(this._element);l(this._element).one(r.TRANSITION_END,function(e){return t._hideModal(e)}).emulateTransitionEnd(o)}else this._hideModal()}}},n.dispose=function(){l.removeData(this._element,h),l(window,document,this._element,this._backdrop).off(c),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},n.handleUpdate=function(){this._adjustDialog()},n._getConfig=function(e){return e=a({},u,e),r.typeCheckConfig(d,e,_),e},n._showElement=function(e){var t=this,i=l(this._element).hasClass(S);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&r.reflow(this._element),l(this._element).addClass(b),this._config.focus&&this._enforceFocus();var n=l.Event(f.SHOWN,{relatedTarget:e}),o=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,l(t._element).trigger(n)};if(i){var s=r.getTransitionDurationFromElement(this._element);l(this._dialog).one(r.TRANSITION_END,o).emulateTransitionEnd(s)}else o()},n._enforceFocus=function(){var t=this;l(document).off(f.FOCUSIN).on(f.FOCUSIN,function(e){document!==e.target&&t._element!==e.target&&0===l(t._element).has(e.target).length&&t._element.focus()})},n._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?l(this._element).on(f.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||l(this._element).off(f.KEYDOWN_DISMISS)},n._setResizeEvent=function(){var t=this;this._isShown?l(window).on(f.RESIZE,function(e){return t.handleUpdate(e)}):l(window).off(f.RESIZE)},n._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){l(document.body).removeClass(p),e._resetAdjustments(),e._resetScrollbar(),l(e._element).trigger(f.HIDDEN)})},n._removeBackdrop=function(){this._backdrop&&(l(this._backdrop).remove(),this._backdrop=null)},n._showBackdrop=function(e){var t=this,i=l(this._element).hasClass(S)?S:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=g,i&&this._backdrop.classList.add(i),l(this._backdrop).appendTo(document.body),l(this._element).on(f.CLICK_DISMISS,function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===t._config.backdrop?t._element.focus():t.hide())}),i&&r.reflow(this._backdrop),l(this._backdrop).addClass(b),!e)return;if(!i)return void e();var n=r.getTransitionDurationFromElement(this._backdrop);l(this._backdrop).one(r.TRANSITION_END,e).emulateTransitionEnd(n)}else if(!this._isShown&&this._backdrop){l(this._backdrop).removeClass(b);var o=function(){t._removeBackdrop(),e&&e()};if(l(this._element).hasClass(S)){var s=r.getTransitionDurationFromElement(this._backdrop);l(this._backdrop).one(r.TRANSITION_END,o).emulateTransitionEnd(s)}else o()}else e&&e()},n._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n._setScrollbar=function(){var o=this;if(this._isBodyOverflowing){var e=[].slice.call(document.querySelectorAll(w)),t=[].slice.call(document.querySelectorAll(E));l(e).each(function(e,t){var i=t.style.paddingRight,n=l(t).css("padding-right");l(t).data("padding-right",i).css("padding-right",parseFloat(n)+o._scrollbarWidth+"px")}),l(t).each(function(e,t){var i=t.style.marginRight,n=l(t).css("margin-right");l(t).data("margin-right",i).css("margin-right",parseFloat(n)-o._scrollbarWidth+"px")});var i=document.body.style.paddingRight,n=l(document.body).css("padding-right");l(document.body).data("padding-right",i).css("padding-right",parseFloat(n)+this._scrollbarWidth+"px")}},n._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(w));l(e).each(function(e,t){var i=l(t).data("padding-right");l(t).removeData("padding-right"),t.style.paddingRight=i||""});var t=[].slice.call(document.querySelectorAll(""+E));l(t).each(function(e,t){var i=l(t).data("margin-right");void 0!==i&&l(t).css("margin-right",i).removeData("margin-right")});var i=l(document.body).data("padding-right");l(document.body).removeData("padding-right"),document.body.style.paddingRight=i||""},n._getScrollbarWidth=function(){var e=document.createElement("div");e.className=m,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},o._jQueryInterface=function(i,n){return this.each(function(){var e=l(this).data(h),t=a({},u,l(this).data(),"object"==typeof i&&i?i:{});if(e||(e=new o(this,t),l(this).data(h,e)),"string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i](n)}else t.show&&e.show(n)})},e=o,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return u}}],(t=null)&&s(e.prototype,t),i&&s(e,i),o}(),l(document).on(f.CLICK_DATA_API,i,function(e){var t,i=this,n=r.getSelectorFromElement(this);n&&(t=document.querySelector(n));var o=l(t).data(h)?"toggle":a({},l(t).data(),l(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var s=l(t).one(f.SHOW,function(e){e.isDefaultPrevented()||s.one(f.HIDDEN,function(){l(i).is(":visible")&&i.focus()})});I._jQueryInterface.call(l(t),o,this)}),l.fn[d]=I._jQueryInterface,l.fn[d].Constructor=I,l.fn[d].noConflict=function(){return l.fn[d]=t,I._jQueryInterface},I});
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],e):t.ScrollSpy=e(t.jQuery,t.Util)}(this,function(t,o){"use strict";function s(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var l,c,a,f,e,h,u,g,_,d,i,p,m,v,y,w,b,E,O,j,C,n;return t=t&&t.hasOwnProperty("default")?t.default:t,o=o&&o.hasOwnProperty("default")?o.default:o,c="scrollspy",f="."+(a="bs.scrollspy"),e=(l=t).fn[c],h={offset:10,method:"auto",target:""},u={offset:"number",method:"string",target:"(string|element)"},g={ACTIVATE:"activate"+f,SCROLL:"scroll"+f,LOAD_DATA_API:"load"+f+".data-api"},_="dropdown-item",d="active",i='[data-spy="scroll"]',p=".active",m=".nav, .list-group",v=".nav-link",y=".nav-item",w=".list-group-item",b=".dropdown",E=".dropdown-item",O=".dropdown-toggle",j="offset",C="position",n=function(){function r(t,e){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+v+","+this._config.target+" "+w+","+this._config.target+" "+E,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,l(this._scrollElement).on(g.SCROLL,function(t){return r._process(t)}),this.refresh(),this._process()}var t,e,i,n=r.prototype;return n.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?j:C,n="auto"===this._config.method?t:this._config.method,s=n===C?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(t){var e,r=o.getSelectorFromElement(t);if(r&&(e=document.querySelector(r)),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[l(e)[n]().top+s,r]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},n.dispose=function(){l.removeData(this._element,a),l(this._scrollElement).off(f),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(t){if("string"!=typeof(t=function(n){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{},e=Object.keys(s);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(s).filter(function(t){return Object.getOwnPropertyDescriptor(s,t).enumerable}))),e.forEach(function(t){var e,r,i;e=n,i=s[r=t],r in e?Object.defineProperty(e,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[r]=i})}return n}({},h,"object"==typeof t&&t?t:{})).target){var e=l(t.target).attr("id");e||(e=o.getUID(c),l(t.target).attr("id",e)),t.target="#"+e}return o.typeCheckConfig(c,t,u),t},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),r=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),r<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var n=this._offsets.length;n--;){this._activeTarget!==this._targets[n]&&t>=this._offsets[n]&&(void 0===this._offsets[n+1]||t<this._offsets[n+1])&&this._activate(this._targets[n])}}},n._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",");t=t.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var r=l([].slice.call(document.querySelectorAll(t.join(","))));r.hasClass(_)?(r.closest(b).find(O).addClass(d),r.addClass(d)):(r.addClass(d),r.parents(m).prev(v+", "+w).addClass(d),r.parents(m).prev(y).children(v).addClass(d)),l(this._scrollElement).trigger(g.ACTIVATE,{relatedTarget:e})},n._clear=function(){var t=[].slice.call(document.querySelectorAll(this._selector));l(t).filter(p).removeClass(d)},r._jQueryInterface=function(e){return this.each(function(){var t=l(this).data(a);if(t||(t=new r(this,"object"==typeof e&&e),l(this).data(a,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},t=r,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return h}}],(e=null)&&s(t.prototype,e),i&&s(t,i),r}(),l(window).on(g.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(i)),e=t.length;e--;){var r=l(t[e]);n._jQueryInterface.call(r,r.data())}}),l.fn[c]=n._jQueryInterface,l.fn[c].Constructor=n,l.fn[c].noConflict=function(){return l.fn[c]=e,n._jQueryInterface},n});
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):e.Tab=t(e.jQuery,e.Util)}(this,function(e,d){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u,t,o,n,r,f,l,c,h,s,m,v,p,g,_,a,y,N,b;return e=e&&e.hasOwnProperty("default")?e.default:e,d=d&&d.hasOwnProperty("default")?d.default:d,t="tab",n="."+(o="bs.tab"),r=(u=e).fn[t],f={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,CLICK_DATA_API:"click"+n+".data-api"},l="dropdown-menu",c="active",h="disabled",s="fade",m="show",v=".dropdown",p=".nav, .list-group",g=".active",_="> li > .active",a='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',y=".dropdown-toggle",N="> .dropdown-menu .active",b=function(){function r(e){this._element=e}var e,t,n,a=r.prototype;return a.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&u(this._element).hasClass(c)||u(this._element).hasClass(h))){var e,r,t=u(this._element).closest(p)[0],a=d.getSelectorFromElement(this._element);if(t){var i="UL"===t.nodeName?_:g;r=(r=u.makeArray(u(t).find(i)))[r.length-1]}var o=u.Event(f.HIDE,{relatedTarget:this._element}),l=u.Event(f.SHOW,{relatedTarget:r});if(r&&u(r).trigger(o),u(this._element).trigger(l),!l.isDefaultPrevented()&&!o.isDefaultPrevented()){a&&(e=document.querySelector(a)),this._activate(this._element,t);var s=function(){var e=u.Event(f.HIDDEN,{relatedTarget:n._element}),t=u.Event(f.SHOWN,{relatedTarget:r});u(r).trigger(e),u(n._element).trigger(t)};e?this._activate(e,e.parentNode,s):s()}}},a.dispose=function(){u.removeData(this._element,o),this._element=null},a._activate=function(e,t,n){var r=this,a=("UL"===t.nodeName?u(t).find(_):u(t).children(g))[0],i=n&&a&&u(a).hasClass(s),o=function(){return r._transitionComplete(e,a,n)};if(a&&i){var l=d.getTransitionDurationFromElement(a);u(a).one(d.TRANSITION_END,o).emulateTransitionEnd(l)}else o()},a._transitionComplete=function(e,t,n){if(t){u(t).removeClass(m+" "+c);var r=u(t.parentNode).find(N)[0];r&&u(r).removeClass(c),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(u(e).addClass(c),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),d.reflow(e),u(e).addClass(m),e.parentNode&&u(e.parentNode).hasClass(l)){var a=u(e).closest(v)[0];if(a){var i=[].slice.call(a.querySelectorAll(y));u(i).addClass(c)}e.setAttribute("aria-expanded",!0)}n&&n()},r._jQueryInterface=function(n){return this.each(function(){var e=u(this),t=e.data(o);if(t||(t=new r(this),e.data(o,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},e=r,n=[{key:"VERSION",get:function(){return"4.1.3"}}],(t=null)&&i(e.prototype,t),n&&i(e,n),r}(),u(document).on(f.CLICK_DATA_API,a,function(e){e.preventDefault(),b._jQueryInterface.call(u(this),"show")}),u.fn[t]=b._jQueryInterface,u.fn[t].Constructor=b,u.fn[t].noConflict=function(){return u.fn[t]=r,b._jQueryInterface},b});
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],e):t.Tooltip=e(t.jQuery,t.Popper,t.Util)}(this,function(t,u,h){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,n,i;e=o,i=r[n=t],n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i})}return o}var f,a,l,c,e,g,p,m,d,v,_,E,T,y,b,C,A,w,S,D,O,n;return t=t&&t.hasOwnProperty("default")?t.default:t,u=u&&u.hasOwnProperty("default")?u.default:u,h=h&&h.hasOwnProperty("default")?h.default:h,a="tooltip",c="."+(l="bs.tooltip"),e=(f=t).fn[a],g="bs-tooltip",p=new RegExp("(^|\\s)"+g+"\\S+","g"),v={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(d={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(m={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},E="out",T={HIDE:"hide"+c,HIDDEN:"hidden"+c,SHOW:(_="show")+c,SHOWN:"shown"+c,INSERTED:"inserted"+c,CLICK:"click"+c,FOCUSIN:"focusin"+c,FOCUSOUT:"focusout"+c,MOUSEENTER:"mouseenter"+c,MOUSELEAVE:"mouseleave"+c},y="fade",b="show",C=".tooltip-inner",A=".arrow",w="hover",S="focus",D="click",O="manual",n=function(){function i(t,e){if(void 0===u)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t,e,n,o=i.prototype;return o.enable=function(){this._isEnabled=!0},o.disable=function(){this._isEnabled=!1},o.toggleEnabled=function(){this._isEnabled=!this._isEnabled},o.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=f(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(f(this.getTipElement()).hasClass(b))return void this._leave(null,this);this._enter(null,this)}},o.dispose=function(){clearTimeout(this._timeout),f.removeData(this.element,this.constructor.DATA_KEY),f(this.element).off(this.constructor.EVENT_KEY),f(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&f(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},o.show=function(){var e=this;if("none"===f(this.element).css("display"))throw new Error("Please use show on visible elements");var t=f.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){f(this.element).trigger(t);var n=f.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!n)return;var i=this.getTipElement(),o=h.getUID(this.constructor.NAME);i.setAttribute("id",o),this.element.setAttribute("aria-describedby",o),this.setContent(),this.config.animation&&f(i).addClass(y);var r="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,s=this._getAttachment(r);this.addAttachmentClass(s);var a=!1===this.config.container?document.body:f(document).find(this.config.container);f(i).data(this.constructor.DATA_KEY,this),f.contains(this.element.ownerDocument.documentElement,this.tip)||f(i).appendTo(a),f(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new u(this.element,i,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:A},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),f(i).addClass(b),"ontouchstart"in document.documentElement&&f(document.body).children().on("mouseover",null,f.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,f(e.element).trigger(e.constructor.Event.SHOWN),t===E&&e._leave(null,e)};if(f(this.tip).hasClass(y)){var c=h.getTransitionDurationFromElement(this.tip);f(this.tip).one(h.TRANSITION_END,l).emulateTransitionEnd(c)}else l()}},o.hide=function(t){var e=this,n=this.getTipElement(),i=f.Event(this.constructor.Event.HIDE),o=function(){e._hoverState!==_&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),f(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(f(this.element).trigger(i),!i.isDefaultPrevented()){if(f(n).removeClass(b),"ontouchstart"in document.documentElement&&f(document.body).children().off("mouseover",null,f.noop),this._activeTrigger[D]=!1,this._activeTrigger[S]=!1,this._activeTrigger[w]=!1,f(this.tip).hasClass(y)){var r=h.getTransitionDurationFromElement(n);f(n).one(h.TRANSITION_END,o).emulateTransitionEnd(r)}else o();this._hoverState=""}},o.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},o.isWithContent=function(){return Boolean(this.getTitle())},o.addAttachmentClass=function(t){f(this.getTipElement()).addClass(g+"-"+t)},o.getTipElement=function(){return this.tip=this.tip||f(this.config.template)[0],this.tip},o.setContent=function(){var t=this.getTipElement();this.setElementContent(f(t.querySelectorAll(C)),this.getTitle()),f(t).removeClass(y+" "+b)},o.setElementContent=function(t,e){var n=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?n?f(e).parent().is(t)||t.empty().append(e):t.text(f(e).text()):t[n?"html":"text"](e)},o.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},o._getAttachment=function(t){return d[t.toUpperCase()]},o._setListeners=function(){var i=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)f(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t)});else if(t!==O){var e=t===w?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===w?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;f(i.element).on(e,i.config.selector,function(t){return i._enter(t)}).on(n,i.config.selector,function(t){return i._leave(t)})}f(i.element).closest(".modal").on("hide.bs.modal",function(){return i.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},o._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},o._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||f(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?S:w]=!0),f(e.getTipElement()).hasClass(b)||e._hoverState===_?e._hoverState=_:(clearTimeout(e._timeout),e._hoverState=_,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===_&&e.show()},e.config.delay.show):e.show())},o._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||f(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?S:w]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=E,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===E&&e.hide()},e.config.delay.hide):e.hide())},o._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},o._getConfig=function(t){return"number"==typeof(t=s({},this.constructor.Default,f(this.element).data(),"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),h.typeCheckConfig(a,t,this.constructor.DefaultType),t},o._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},o._cleanTipClass=function(){var t=f(this.getTipElement()),e=t.attr("class").match(p);null!==e&&e.length&&t.removeClass(e.join(""))},o._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},o._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(f(t).removeClass(y),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},i._jQueryInterface=function(n){return this.each(function(){var t=f(this).data(l),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new i(this,e),f(this).data(l,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},t=i,n=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return v}},{key:"NAME",get:function(){return a}},{key:"DATA_KEY",get:function(){return l}},{key:"Event",get:function(){return T}},{key:"EVENT_KEY",get:function(){return c}},{key:"DefaultType",get:function(){return m}}],(e=null)&&r(t.prototype,e),n&&r(t,n),i}(),f.fn[a]=n._jQueryInterface,f.fn[a].Constructor=n,f.fn[a].noConflict=function(){return f.fn[a]=e,n._jQueryInterface},n});
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],e):t.Util=e(t.jQuery)}(this,function(t){"use strict";return function(r){var e="transitionend";function t(t){var e=this,n=!1;return r(this).one(s.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||s.triggerTransitionEnd(e)},t),this}var s={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=r(t).css("transition-duration");return parseFloat(e)?(e=e.split(",")[0],1e3*parseFloat(e)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){r(t).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=e[r],u=o&&s.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(u))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+u+'" but expected type "'+i+'".')}var a}};return r.fn.emulateTransitionEnd=t,r.event.special[s.TRANSITION_END]={bindType:e,delegateType:e,handle:function(t){if(r(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},s}(t=t&&t.hasOwnProperty("default")?t.default:t)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
